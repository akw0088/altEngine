#define MAX_LIGHTS 64

struct attr_t
{
	float3 position		: POSITION;
	float2 texCoord0	: TEXCOORD0;
	float2 texCoord1	: TEXCOORD1;
	float3 normal		: NORMAL;
	int color		: COLOR;
	float4 tangent		: TANGENT;
};

struct vary_t
{
	float4 position			: POSITION1;
	float2 texCoord0		: TEXCOORD0;
	float2 texCoord1		: TEXCOORD1;
	float3 normal			: NORMAL;
	int color			: COLOR;
	float4 tangent			: TANGENT;
};

uniform float4x4	mvp;
uniform sampler		tex0, tex1, tex2, tex3, tex4, tex5, tex6, tex7, texture_lightmap, texture_normalmap;
uniform float3		u_position[MAX_LIGHTS];
uniform float4		u_color[MAX_LIGHTS];
uniform int		u_num_lights;

float4 main(in vary_t vary) : COLOR0
{
	float4 texColor[4];
	float4 Fragment;
	float3 lightmap;

	texColor[0] = tex2D(tex0, vary.texCoord0);
	texColor[1] = tex2D(tex1, vary.texCoord0);
	texColor[2] = tex2D(tex2, vary.texCoord0);
	texColor[3] = tex2D(tex3, vary.texCoord0);
	lightmap = tex2D(texture_lightmap, vary.texCoord1).xyz;

	Fragment.rgb = texColor[0].rgb; + texColor[1].rgb + texColor[2].rgb + texColor[3].rgb;
//	Fragment.a = texColor[0].a * texColor[1].a * texColor[2].a * texColor[3].a;
	Fragment.a = 1.0;

	float3 normal = normalize(vary.normal.xyz);

	float3 intensity = 0.5;

	for(int i = 0; i < u_num_lights; i++)
	{
		float4 csPos = mul(float4(u_position[i].x, u_position[i].y, u_position[i].z, 1.0), mvp);
		float4 lighti;
		lighti.xyz = -normalize(csPos.xyz - vary.position.xyz);
		lighti.w = length(csPos.xyz - vary.position.xyz);

		float3 v_light = -lighti.xyz;
		float3 v_reflect = reflect(v_light, normal);
		float diffuse = max(dot(v_light, normal), 0.0) * 0.25;
		float specular = pow(max(dot(v_reflect, float3(0.0,0.0,-1.0f)), 0.0), 10.0) * 0.25;
		float atten = min(40000.0 / pow(abs(length(u_position[i].xyz)), 1.75), 0.75);
//		atten = 0.0;

		intensity = intensity + atten * (diffuse + specular + u_color[i].xyz * 0.25);
	}

//	Fragment.rgb *= lightmap;


//	Fragment.xyz += intensity;

	return Fragment;
//	return tex2D(tex0, vary.texCoord0);
}
