#define MAX_LIGHTS 4

struct attr_t
{
	float3 position		: POSITION;
	float2 texCoord0	: TEXCOORD0;
	float2 texCoord1	: TEXCOORD1;
	float3 normal		: NORMAL;
	int color		: COLOR;
	float4 tangent		: TANGENT;
};

struct vary_t
{
	float4 position			: POSITION;
	float2 texCoord0		: TEXCOORD0;
	float2 texCoord1		: TEXCOORD1;
	float3 normal			: NORMAL;
	int color			: COLOR;
	float4 tangent			: TANGENT;
};

uniform float4x4	mvp;
uniform sampler		tex0, tex1, tex2, tex3;
uniform float3		u_position[MAX_LIGHTS];
uniform float4		u_color[MAX_LIGHTS];
uniform int		u_num_lights;

float4 main(in vary_t vary) : COLOR0
{
	float4 texColor[4];
	float4 Fragment;


	texColor[0] = tex2D(tex0, vary.texCoord0);
	texColor[1] = tex2D(tex1, vary.texCoord0);
	texColor[2] = tex2D(tex2, vary.texCoord0);
	texColor[3] = tex2D(tex2, vary.texCoord0);

	Fragment.r = 0.0;
	Fragment.g = 0.0;
	Fragment.b = 0.0;
	Fragment.a = 0.5;
	Fragment += texColor[0];// + texColor[1] + texColor[2] + texColor[3];
	float3 normal = normalize(vary.normal.xyz);

	float3 intensity = 0.5;

	for(int i = 0; i < u_num_lights; i++)
	{
		float3 v_light = normalize(-u_position[i].xyz);
		float3 v_reflect = reflect(v_light, normal);
		float diffuse = max(dot(v_light, normal), 0.0) * 0.25;
		float specular = pow(max(dot(v_reflect, float3(0.0,0.0,-1.0f)), 0.0), 10.0) * 0.25;
		float atten = min(40000.0 / pow(abs(length(u_position[i].xyz)), 1.75), 0.75);
		atten = 0.0;

		intensity = intensity + atten * (diffuse + specular + u_color[i].xyz * 0.25);
	}
//	Fragment.xyz += intensity;

	return Fragment;
//	return tex2D(tex0, vary.texCoord0);
}
